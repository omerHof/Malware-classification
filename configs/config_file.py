import torch
from Data.data_util import MALWARE_CLASSES
import torch.nn as nn
from Models.architectures import TripletLoss

class Base_Config:
    def __init__(self):
        # self.root_path = '/dt/shabtaia/dt-fujitsu-explainability/Omer/Attack_detection_course/malware_img_dataset'
        # self.root_path = '/sise/home/szoke/malware-classification/malware_subset_for_dev'
        self.root_path = '/sise/home/szoke/malware-classification/malware_images'

        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

        self.loader_params = {
            'batch_size': 32,
            'num_workers': 4,
        }

class Classifier_config(Base_Config):
    def __init__(self):
        super(Base_Config, self).__init__()
        self.mode = 'classification'
        # self.root_path = '/dt/shabtaia/dt-fujitsu-explainability/Omer/Attack_detection_course/malware_img_dataset'
        # self.root_path = '/sise/home/szoke/malware-classification/malware_subset_for_dev'
        self.root_path = '/sise/home/szoke/malware-classification/malware_images'

        self.model_params = {
            'model_arch': 'resnet18',
            'num_of_classes': len(MALWARE_CLASSES),
            'device': torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        }

        self.finetune_params = {
            'epochs': 10,
            'kfold':5,
        }
        self.criterion = nn.CrossEntropyLoss()
        self.loader_params = {
            'batch_size': 256,
            'num_workers': 4,
        }


class Siamese_net_config(Base_Config):
    def __init__(self):
        super(Base_Config, self).__init__()
        self.mode = 'embedding'
        # self.root_path = '/dt/shabtaia/dt-fujitsu-explainability/Omer/Attack_detection_course/malware_subset_for_dev'
        self.root_path = '/dt/shabtaia/dt-fujitsu-explainability/Omer/Attack_detection_course/malware_img_dataset'
        # self.root_path = '/sise/home/szoke/malware-classification/malware_subset_for_dev'
        # self.root_path = '/sise/home/szoke/malware-classification/malware_images'

        self.model_params = {
            'model_arch': 'resnet18',
            'num_of_classes': len(MALWARE_CLASSES),
            'device': torch.device('cuda' if torch.cuda.is_available() else 'cpu'),
            'embedding_size': 1024
        }

        self.finetune_params = {
            'epochs': 30,
            'kfold': 5,
        }
        self.criterion = TripletLoss(margin=0.1)
        self.loader_params = {
            'batch_size': 256,
            'num_workers': 4,
        }





